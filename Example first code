# Importing required libraries
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import seaborn as sns

# Load your dataset (make sure to adjust the path and filename)
# The dataset should include columns for education rate, employment rate, minimum wage, insurance, cost of living, and happiness index.
data = pd.read_csv('happiness_data.csv')

# Display the first few rows of the dataset
print(data.head())

# Select relevant features for clustering
features = ['education_rate', 'employment_rate', 'minimum_wage', 'insurance', 'cost_of_living', 'happiness_index']
X = data[features]

# Standardize the data
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Determine the optimal number of clusters using the Elbow method
inertia = []
for k in range(1, 11):
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(X_scaled)
    inertia.append(kmeans.inertia_)

# Plot the Elbow curve
plt.figure(figsize=(10, 6))
plt.plot(range(1, 11), inertia, marker='o')
plt.title('Elbow Method for Optimal k')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Inertia')
plt.xticks(range(1, 11))
plt.grid()
plt.show()

# Choose the optimal number of clusters (e.g., 3) based on the Elbow method
optimal_k = 3
kmeans = KMeans(n_clusters=optimal_k, random_state=42)
data['Cluster'] = kmeans.fit_predict(X_scaled)

# Visualizing the clusters
plt.figure(figsize=(12, 8))
sns.scatterplot(data=data, x='education_rate', y='happiness_index', hue='Cluster', palette='viridis', s=100)
plt.title('Clusters of Countries Based on Education Rate and Happiness Index')
plt.xlabel('Education Rate')
plt.ylabel('Happiness Index')
plt.legend(title='Cluster')
plt.show()

# Display the cluster centers
centers = scaler.inverse_transform(kmeans.cluster_centers_)
cluster_centers_df = pd.DataFrame(centers, columns=features)
print("Cluster Centers:")
print(cluster_centers_df)
